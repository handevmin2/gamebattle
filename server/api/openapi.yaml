openapi: 3.0.3
info:
  title: 게임 토너먼트 웹사이트 API
  description: 게임 토너먼트 웹사이트를 위한 API입니다.
  version: 1.0.0
servers:
- url: https://api.gametournament.com/v1
  description: 게임 토너먼트 웹사이트 서버
tags:
- name: tournaments
  description: 토너먼트 대회 관련 작업
- name: announcements
  description: 공지사항 및 뉴스 관련 작업
- name: community
  description: 커뮤니티 게시판 작업
- name: authentication
  description: 계정 관련 작업
- name: leaderboard
  description: 명예의전당 작업
- name: user
  description: 마이페이지 관련 작업
paths:
  /auth/signup:
    post:
      tags:
      - authentication
      summary: 회원가입
      operationId: signUp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: 회원가입 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: 잘못된 요청
      x-swagger-router-controller: Authentication
  /auth/login:
    post:
      tags:
      - authentication
      summary: 로그인
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth_login_body'
        required: true
      responses:
        "200":
          description: "로그인 성공, 인증 토큰 반환"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        "401":
          description: 인증 실패
      x-swagger-router-controller: Authentication
  /auth/logout:
    post:
      tags:
      - authentication
      summary: 로그아웃
      operationId: logout
      responses:
        "200":
          description: 로그아웃 성공
      x-swagger-router-controller: Authentication
  /tournaments/popular:
    get:
      tags:
      - tournaments
      summary: 인기 있는 대회 목록 조회
      operationId: getPopularTournaments
      responses:
        "200":
          description: 인기 있는 대회 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tournament'
                x-content-type: application/json
      x-swagger-router-controller: Tournaments
  /tournaments/hot:
    get:
      tags:
      - tournaments
      summary: 지금 핫한 대회 목록 조회
      operationId: getHotTournaments
      responses:
        "200":
          description: 지금 핫한 대회 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tournament'
                x-content-type: application/json
      x-swagger-router-controller: Tournaments
  /tournaments/upcoming:
    get:
      tags:
      - tournaments
      summary: 진행 예정인 토너먼트 목록 조회
      operationId: getUpcomingTournaments
      responses:
        "200":
          description: 진행 예정인 토너먼트 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tournament'
                x-content-type: application/json
      x-swagger-router-controller: Tournaments
  /chat:
    get:
      tags:
      - chat
      summary: WebSocket을 통한 실시간 채팅 연결
      operationId: connectChat
      responses:
        "101":
          description: Switching Protocols to WebSocket
      x-swagger-router-controller: Chat
  /announcements:
    get:
      tags:
      - announcements
      summary: 공지사항 목록 조회
      operationId: getAnnouncements
      responses:
        "200":
          description: 공지사항 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Announcement'
                x-content-type: application/json
      x-swagger-router-controller: Announcements
    post:
      tags:
      - announcements
      summary: 새 공지사항 생성
      operationId: createAnnouncement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Announcement'
        required: true
      responses:
        "201":
          description: 공지사항 생성 성공
        "400":
          description: 잘못된 요청
      x-swagger-router-controller: Announcements
  /announcements/{announcementId}:
    put:
      tags:
      - announcements
      summary: 공지사항 수정
      operationId: updateAnnouncement
      parameters:
      - name: announcementId
        in: path
        description: 수정할 공지사항의 ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Announcement'
        required: true
      responses:
        "200":
          description: 공지사항 수정 성공
        "400":
          description: 잘못된 요청
      x-swagger-router-controller: Announcements
    delete:
      tags:
      - announcements
      summary: 공지사항 삭제
      operationId: deleteAnnouncement
      parameters:
      - name: announcementId
        in: path
        description: 삭제할 공지사항의 ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: 공지사항 삭제 성공
        "400":
          description: 잘못된 요청
      x-swagger-router-controller: Announcements
  /tournaments/search:
    get:
      tags:
      - tournaments
      summary: 토너먼트 검색
      operationId: searchTournaments
      parameters:
      - name: keyword
        in: query
        description: 검색 키워드
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: game
        in: query
        description: 게임 종목
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: 검색 결과
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tournament'
                x-content-type: application/json
      x-swagger-router-controller: Tournaments
  /tournaments:
    get:
      tags:
      - tournaments
      summary: 토너먼트 목록 조회
      operationId: getTournaments
      responses:
        "200":
          description: 공지사항 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tournament'
                x-content-type: application/json
      x-swagger-router-controller: Tournaments
    post:
      tags:
      - tournaments
      summary: 새 토너먼트 생성
      operationId: createTournament
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TournamentDetails'
        required: true
      responses:
        "201":
          description: 토너먼트 생성 성공
        "400":
          description: 잘못된 요청
      x-swagger-router-controller: Tournaments
  /tournaments/{tournamentId}:
    get:
      tags:
      - tournaments
      summary: 토너먼트 상세 정보 조회
      operationId: getTournamentDetails
      parameters:
      - name: tournamentId
        in: path
        description: 조회할 토너먼트의 ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: 토너먼트 상세 정보
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentDetails'
      x-swagger-router-controller: Tournaments
    put:
      tags:
      - tournaments
      summary: 토너먼트 상세 정보 수정
      operationId: updateTournamentDetails
      parameters:
      - name: tournamentId
        in: path
        description: 수정할 토너먼트의 ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TournamentDetails'
        required: true
      responses:
        "200":
          description: 토너먼트 정보 수정 성공
        "400":
          description: 잘못된 요청
        "403":
          description: 수정 권한 없음
      x-swagger-router-controller: Tournaments
    delete:
      tags:
      - tournaments
      summary: 토너먼트 삭제
      operationId: deleteTournamentDetails
      parameters:
      - name: tournamentId
        in: path
        description: 삭제할 토너먼트의 ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: 토너먼트 삭제 성공
        "400":
          description: 잘못된 요청
      x-swagger-router-controller: Tournaments
  /tournaments/{tournamentId}/bracket:
    get:
      tags:
      - tournaments
      summary: 대진표 조회
      operationId: getBracket
      parameters:
      - name: tournamentId
        in: path
        description: 조회할 토너먼트의 ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: 대진표 정보
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bracket'
                x-content-type: application/json
      x-swagger-router-controller: Tournaments
    put:
      tags:
      - tournaments
      summary: 대진표 수정
      operationId: updateBrackets
      parameters:
      - name: tournamentId
        in: path
        description: 수정할 토너먼트의 ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Bracket'
        required: true
      responses:
        "200":
          description: 대진표 수정 성공
        "400":
          description: 잘못된 요청
        "403":
          description: 수정 권한 없음
      x-swagger-router-controller: Tournaments
    post:
      tags:
      - tournaments
      summary: 대진표 등록
      operationId: createBracket
      parameters:
      - name: tournamentId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bracket'
        required: true
      responses:
        "201":
          description: 대진표 등록 성공
        "400":
          description: 잘못된 요청
        "403":
          description: 등록 권한 없음
      x-swagger-router-controller: Tournaments
    delete:
      tags:
      - tournaments
      summary: 대진표 삭제
      operationId: deleteBracket
      parameters:
      - name: tournamentId
        in: path
        description: 삭제할 대진표의 ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: 대진표 삭제 성공
        "400":
          description: 잘못된 요청
      x-swagger-router-controller: Tournaments
  /tournaments/{tournamentId}/result:
    post:
      tags:
      - tournaments
      summary: 경기 결과 등록
      operationId: postMatchResult
      parameters:
      - name: tournamentId
        in: path
        description: 결과를 등록할 토너먼트의 ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Match'
        required: true
      responses:
        "201":
          description: 결과 등록 성공
        "400":
          description: 잘못된 요청
      x-swagger-router-controller: Tournaments
  /tournaments/{tournamentId}/result/{bracketId}:
    put:
      tags:
      - tournaments
      summary: 경기 결과 수정
      operationId: updateMatchResult
      parameters:
      - name: tournamentId
        in: path
        description: 토너먼트 ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: bracketId
        in: path
        description: 수정할 경기의 ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bracket'
        required: true
      responses:
        "200":
          description: 경기 결과 수정 성공
        "400":
          description: 잘못된 요청
        "403":
          description: 수정 권한 없음
      x-swagger-router-controller: Tournaments
  /tournaments/{tournamentId}/teams:
    get:
      tags:
      - tournaments
      summary: 특정 토너먼트의 참가팀 목록 조회
      operationId: getTournamentTeams
      parameters:
      - name: tournamentId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: 참가팀 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
                x-content-type: application/json
        "404":
          description: 토너먼트를 찾을 수 없음
      x-swagger-router-controller: Tournaments
  /tournaments/{tournamentId}/apply:
    post:
      tags:
      - tournaments
      summary: 토너먼트 참가 신청
      operationId: applyForTournament
      parameters:
      - name: tournamentId
        in: path
        description: 참가 신청할 토너먼트의 ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
        required: true
      responses:
        "201":
          description: 참가 신청 성공
        "400":
          description: 잘못된 요청
      x-swagger-router-controller: Tournaments
  /users/search:
    get:
      summary: 사용자 검색
      operationId: searchUser
      parameters:
      - name: userId
        in: query
        description: 검색할 사용자 아이디
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: 사용자 검색 결과
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
                x-content-type: application/json
      x-swagger-router-controller: User
  /community/posts:
    get:
      tags:
      - community
      summary: 게시글 목록 조회
      operationId: listPosts
      responses:
        "200":
          description: 게시글 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
                x-content-type: application/json
      x-swagger-router-controller: Community
    post:
      tags:
      - community
      summary: 새 게시글 생성
      operationId: createPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        "201":
          description: 게시글 생성 성공
        "400":
          description: 잘못된 요청
      x-swagger-router-controller: Community
  /community/posts/{postId}:
    put:
      tags:
      - community
      summary: 게시글 수정
      operationId: updatePost
      parameters:
      - name: postId
        in: path
        description: 수정할 게시글의 ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        "200":
          description: 게시글 수정 성공
        "400":
          description: 잘못된 요청
      x-swagger-router-controller: Community
    delete:
      tags:
      - community
      summary: 게시글 삭제
      operationId: deletePost
      parameters:
      - name: postId
        in: path
        description: 삭제할 게시글의 ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: 게시글 삭제 성공
        "400":
          description: 잘못된 요청
      x-swagger-router-controller: Community
  /community/posts/{postId}/comments:
    get:
      tags:
      - community
      summary: 게시글의 댓글 목록 조회
      operationId: listComments
      parameters:
      - name: postId
        in: path
        description: 댓글을 조회할 게시글의 ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: 댓글 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
                x-content-type: application/json
      x-swagger-router-controller: Community
    post:
      tags:
      - community
      summary: 새 댓글 생성
      operationId: createComment
      parameters:
      - name: postId
        in: path
        description: 댓글을 작성할 게시글의 ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        "201":
          description: 댓글 생성 성공
        "400":
          description: 잘못된 요청
      x-swagger-router-controller: Community
  /user/{userId}:
    get:
      tags:
      - user
      summary: 사용자 정보 조회
      operationId: getUserId
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      x-swagger-router-controller: Users
    put:
      tags:
      - user
      summary: Update User Account
      operationId: putUserId
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      x-swagger-router-controller: User
    delete:
      tags:
      - user
      summary: Delete User Account
      operationId: deleteUserId
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No Content
      x-swagger-router-controller: User
  /user/{userId}/team:
    get:
      tags:
      - user
      summary: 사용자의 현재 팀 조회
      operationId: getUserTeam
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: 사용자의 현재 팀 정보
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
      x-swagger-router-controller: User
  /user/{userId}/notifications:
    get:
      tags:
      - user
      summary: 사용자의 알림 목록 조회
      operationId: getUserNotifications
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: 사용자의 알림 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
                x-content-type: application/json
      x-swagger-router-controller: User
  /user/{userId}/schedule:
    get:
      tags:
      - user
      summary: 사용자의 게임 일정 조회
      operationId: getUserGameSchedule
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: 사용자의 게임 일정
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tournament'
                x-content-type: application/json
      x-swagger-router-controller: User
  /leaderboard/individual:
    get:
      tags:
      - leaderboard
      summary: 개인 순위 조회
      operationId: getIndividualRankings
      parameters:
      - name: limit
        in: query
        description: 반환할 순위의 개수 (기본값 10)
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 10
      responses:
        "200":
          description: 상위 개인 순위 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
                x-content-type: application/json
      x-swagger-router-controller: Leaderboard
  /leaderboard/team:
    get:
      tags:
      - leaderboard
      summary: 팀 순위 조회
      operationId: getTeamRankings
      parameters:
      - name: limit
        in: query
        description: 반환할 순위의 개수 (기본값 10)
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 10
      responses:
        "200":
          description: 상위 팀 순위 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
                x-content-type: application/json
      x-swagger-router-controller: Leaderboard
  /payment:
    post:
      tags:
      - payment
      summary: 결제 처리
      operationId: processPayment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
        required: true
      responses:
        "200":
          description: 결제 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "400":
          description: 잘못된 요청
        "500":
          description: 서버 오류
      x-swagger-router-controller: Payment
components:
  schemas:
    User:
      required:
      - email
      - password
      - userId
      type: object
      properties:
        userId:
          type: string
          readOnly: true
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        phoneNumber:
          type: string
        bio:
          type: string
        wins:
          type: integer
        history:
          type: array
          items:
            $ref: '#/components/schemas/Tournament'
        currentTeam:
          $ref: '#/components/schemas/Team'
        gameSchedule:
          type: array
          items:
            $ref: '#/components/schemas/Tournament'
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      example:
        userId: userId
        email: email
        password: password
        phoneNumber: phoneNumber
        bio: bio
        created_at: 2000-01-23T04:56:07.000+00:00
        updated_at: 2000-01-23T04:56:07.000+00:00
    Session:
      title: Session
      type: object
      properties:
        userId:
          type: string
        auth_header:
          type: string
      example:
        userId: userId
        auth_header: auth_header
    Notification:
      type: object
      properties:
        notificationId:
          type: string
        title:
          type: string
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        read:
          type: boolean
        NotificationImage:
          type: string
          format: uri
      example:
        read: true
        NotificationImage: http://example.com/aeiou
        notificationId: notificationId
        title: title
        message: message
        timestamp: 2000-01-23T04:56:07.000+00:00
    Tournament:
      type: object
      properties:
        tournamentId:
          type: string
        name:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        status:
          type: string
          enum:
          - ongoing
          - upcoming
          - completed
        details:
          $ref: '#/components/schemas/TournamentDetails'
      example:
        endDate: 2000-01-23T04:56:07.000+00:00
        name: name
        tournamentId: tournamentId
        startDate: 2000-01-23T04:56:07.000+00:00
        status: ongoing
    TournamentDetails:
      type: object
      properties:
        title:
          type: string
        game:
          type: string
        registrationPeriod:
          $ref: '#/components/schemas/TournamentDetails_registrationPeriod'
        schedule:
          $ref: '#/components/schemas/TournamentDetails_registrationPeriod'
        rules:
          type: string
        entryFee:
          type: integer
        prize:
          type: integer
        competitionFormat:
          type: string
          enum:
          - individual
          - team
        tournamentType:
          type: string
          enum:
          - single
          - double
        ageRestriction:
          type: boolean
        minimumAge:
          type: integer
        enableLiveChat:
          type: boolean
        backgroundImage:
          type: string
          format: uri
        numberOfTeamMember:
          type: integer
        viewCount:
          type: integer
          default: 0
        teams:
          type: array
          items:
            $ref: '#/components/schemas/Team'
        bracket:
          $ref: '#/components/schemas/Bracket'
      example:
        entryFee: 0
        numberOfTeamMember: 0
        schedule:
          start: 2000-01-23T04:56:07.000+00:00
          end: 2000-01-23T04:56:07.000+00:00
        game: game
        registrationPeriod:
          start: 2000-01-23T04:56:07.000+00:00
          end: 2000-01-23T04:56:07.000+00:00
        backgroundImage: http://example.com/aeiou
        rules: rules
        prize: 0
        title: title
        competitionFormat: individual
        tournamentType: single
        ageRestriction: true
        minimumAge: 18
        enableLiveChat: true
    Announcement:
      type: object
      properties:
        announcementId:
          type: string
        title:
          type: string
        content:
          type: string
        datePosted:
          type: string
          format: date-time
      example:
        announcementId: announcementId
        title: title
        datePosted: 2000-01-23T04:56:07.000+00:00
        content: content
    ChatMessage:
      type: object
      properties:
        userId:
          $ref: '#/components/schemas/User'
        message:
          type: string
        timestamp:
          type: string
          format: date-time
    Bracket:
      type: object
      properties:
        bracketId:
          type: string
        rounds:
          type: array
          items:
            $ref: '#/components/schemas/Bracket_rounds'
      example:
        bracketId: bracket1
        rounds:
        - round: 1
          matches:
          - order: 1
            score:
              teamAScore: 6
              teamBScore: 1
            scheduledTime: 2000-01-23T04:56:07.000+00:00
            teamA: teamA
            teamB: teamB
          - order: 2
            score:
              teamAScore: 3
              teamBScore: 4
            scheduledTime: 2000-01-23T06:30:00.000+00:00
            teamA: teamC
            teamB: teamD
        - round: 2
          matches:
          - order: 1
            score:
              teamAScore: 2
              teamBScore: 3
            scheduledTime: 2000-01-24T05:00:00.000+00:00
            teamA: teamE
            teamB: teamF
          - order: 2
            score:
              teamAScore: 5
              teamBScore: 5
            scheduledTime: 2000-01-24T07:15:00.000+00:00
            teamA: teamG
            teamB: teamH
    Match:
      type: object
      properties:
        order:
          type: integer
        score:
          $ref: '#/components/schemas/Match_score'
        scheduledTime:
          type: string
          format: date-time
        teamA:
          type: string
        teamB:
          type: string
        winner:
          type: string
        resultImage:
          type: string
          format: uri
      example:
        order: 1
        score:
          teamAScore: 6
          teamBScore: 1
        scheduledTime: 2000-01-23T04:56:07.000+00:00
        teamA: teamA
        teamB: teamB
        winner: teamA
        resultImage: http://example.com/match1/result.jpg
    Post:
      type: object
      properties:
        postId:
          type: string
        title:
          type: string
        content:
          type: string
        author:
          type: string
        datePosted:
          type: string
          format: date-time
      example:
        author: author
        postId: postId
        title: title
        datePosted: 2000-01-23T04:56:07.000+00:00
        content: content
    Comment:
      type: object
      properties:
        commentId:
          type: string
        postId:
          type: string
        content:
          type: string
        author:
          type: string
        datePosted:
          type: string
          format: date-time
      example:
        author: author
        commentId: commentId
        postId: postId
        datePosted: 2000-01-23T04:56:07.000+00:00
        content: content
    Team:
      required:
      - teamMembers
      - teamName
      type: object
      properties:
        teamId:
          type: string
        teamName:
          type: string
        teamMembers:
          type: array
          items:
            $ref: '#/components/schemas/User'
        logoImage:
          type: string
          format: uri
      example:
        teamName: teamName
        logoImage: http://example.com/aeiou
        teamId: teamId
        teamMembers:
        - userId: userId
          email: email
          password: password
          phoneNumber: phoneNumber
          bio: bio
          created_at: 2000-01-23T04:56:07.000+00:00
          updated_at: 2000-01-23T04:56:07.000+00:00
        - userId: userId
          email: email
          password: password
          phoneNumber: phoneNumber
          bio: bio
          created_at: 2000-01-23T04:56:07.000+00:00
          updated_at: 2000-01-23T04:56:07.000+00:00
    Payment:
      required:
      - amount
      - paymentMethod
      - userId
      type: object
      properties:
        userId:
          $ref: '#/components/schemas/User'
        amount:
          type: number
          format: double
        paymentMethod:
          type: string
          enum:
          - credit_card
          - debit_card
          - paypal
          - bank_transfer
    auth_login_body:
      type: object
      properties:
        userId:
          type: string
        password:
          type: string
    inline_response_200:
      type: object
      properties:
        transactionId:
          type: string
        status:
          type: string
          enum:
          - success
          - failed
        message:
          type: string
      example:
        message: message
        transactionId: transactionId
        status: success
    TournamentDetails_registrationPeriod:
      type: object
      properties:
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
    Bracket_rounds:
      type: object
      properties:
        round:
          type: integer
        matches:
          type: array
          items:
            $ref: '#/components/schemas/Match'
    Match_score:
      type: object
      properties:
        teamAScore:
          type: integer
        teamBScore:
          type: integer
